<?php
/**
 * @file
 *  Utility to work with linked data resources.
 * @copyright Copyright(c) 2012 Christopher Skene
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Chris Skene chris at xtfer dot com
 */

use \Xu\Component\Helpers\ArrayHelper as ArrayHelper;

/**
 * Define a default source plugin
 */
const SOURCERY_DEFAULT_SOURCE_PLUGIN = 'default_source';

/**
 * Define a default source plugin
 */
const SOURCERY_DEFAULT_TRANSPORT_PLUGIN = 'default_transport';

/**
 * Define a default source plugin
 */
const SOURCERY_DEFAULT_PARSER_PLUGIN = 'default_parser';

/** Drupal Hooks *********************************************************/

/**
 * Implements hook_help().
 */
function sourcery_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#sourcery':
      // Display the introduction paragraph.
      $output .= '<p>' . t('Sourcery is a tool for mapping linked data resources to local entities.') . '</p>';
  }

  return $output;
}

/** Ctools Plugins ******************************************************/

/**
 * Implements HOOK_ctools_plugin_directory()
 *
 * Tell ctools where our plugins live.
 */
function sourcery_ctools_plugin_directory($module, $plugin) {
  if ($module == 'sourcery') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements HOOK_ctools_plugin_TYPE()
 *
 * Inform CTools about mapper plugins
 */
function sourcery_ctools_plugin() {
  return array(
    'cache' => FALSE, // change to true for release
  );
}

/**
 * Load a plugin
 *
 * @param string $type
 *  The type of plugin to load. Possible values are 'parser'.
 * @param string $name
 *  Name of the plugin
 *
 * @return array
 *  An array of plugin information
 */
function sourcery_load_plugin($type, $name) {
  ctools_include('plugins');
  return ctools_get_plugins('sourcery', $type, $name);
}

/**
 * Load all plugins of a type
 *
 * @param string $type
 *  The type of plugin to load. Possible values are 'parser'.
 *
 * @return array
 *  An array of plugin information
 */
function sourcery_load_plugins($type) {
  ctools_include('plugins');
  return ctools_get_plugins('sourcery', $type);
}

/** Sourcery ************************************************************/

/**
 * Load and return a Source.
 *
 * @param string $plugin [optional]
 *  The source plugin to use. Defaults to 'default_source'.
 *
 * @return \Drupal\sourcery\Components\Sourcerer
 *  A controller to handle requests to the source
 */
function sourcery_source($plugin = SOURCERY_DEFAULT_SOURCE_PLUGIN) {

  // Create the Sourcery Sourcerer to handle the request
  $sourcery = new \Drupal\sourcery\Components\Sourcerer($plugin);

  return $sourcery;
}

/**
 * Create a source object
 *
 * @param string $plugin_name
 *  Name of the source type to invoke
 *
 * @return \Drupal\sourcery\Components\Source\SourceInterface|bool
 *  The source, or FALSE
 */
function sourcery_invoke_source($plugin_name = SOURCERY_DEFAULT_SOURCE_PLUGIN) {
  $config = sourcery_load_plugin('source', $plugin_name);
  if (class_exists($config['class'])) {
    $source = new $config['class']();
    if ($source instanceof \Drupal\sourcery\Components\Source\SourceInterface) {
      if (sourcery_prerequisites($config)) {
        return $source;
      }
    }
  }

  return FALSE;
}

/**
 * Create a parser object
 *
 * @param string $type
 *  Name of the parser type to invoke
 *
 * @return \Drupal\sourcery\Components\Parser\ParserInterface|bool
 *  The parser, or FALSE
 */
function sourcery_invoke_parser($type) {
  $config = sourcery_load_plugin('parser', $type);
  if (class_exists($config['class'])) {
    $parser = new $config['class']();
    if ($parser instanceof \Drupal\sourcery\Components\Parser\ParserInterface) {
      if (sourcery_prerequisites($config)) {
        return $parser;
      }
    }
  }

  return FALSE;
}

/**
 * Create a transport object
 *
 * @param string $type
 *  Name of the transport type to invoke
 *
 * @return \Drupal\sourcery\Components\Transport\TransportInterface|bool
 *  The parser, or FALSE
 */
function sourcery_invoke_transport($type) {
  $config = sourcery_load_plugin('parser', $type);
  if (class_exists($config['class'])) {
    $transport = new $config['class']();
    if ($transport instanceof \Drupal\sourcery\Components\Transport\TransportInterface) {
      if (sourcery_prerequisites($config)) {
        return $transport;
      }
    }
  }

  return FALSE;
}

/**
 * Check that the prerequisites for a plugin are available
 *
 * This checks the 'requirements' key in the plugin for an array of modules. If
 * the key exists, all modules must be present. If the key is absent, this function
 * simply returns TRUE.
 *
 * @param array $config
 *  An array of plugin configuration parameters
 *
 * @return bool
 *  TRUE, if requirements pass, or FALSE otherwise
 */
function sourcery_prerequisites($config) {
  if (isset($config['requirements']) && !empty($config['requirements'])) {
    $result = _sourcery_all_true($config['requirements'], 'module_exists');
    if (isset($config['requirements']) && _sourcery_assert_true($result,'result')) {
      return TRUE;
    }
    else {
      drupal_set_message('Sourcery could not load dependency. Please ensure the ' . $result['error'] . ' module is installed');
      return FALSE;
    }
  }

  return TRUE;
}

/**
 *
 */
/**
 * Check all items in an array via a callback
 *
 * @param array $data
 * @param string $callback
 *
 * @return array|bool
 */
function _sourcery_all_true(array $data, $callback) {
  if (!function_exists($callback)) {
    // @todo should throw an error
    return FALSE;
  }

  if (is_array($data) && !empty($data)) {
    foreach($data as $key => $datum) {
      if (call_user_func($callback, $datum) == FALSE) {
        return array(
          'result' => FALSE,
          'error' => $datum,
        );
      }
    }
  }

  return array(
    'result' => TRUE,
  );
}

/**
 * Check that a given value is TRUE
 */
function _sourcery_assert_true($data, $key) {
  if (isset($data['key'])) {
    if ($data[$key] == TRUE) {
      return TRUE;
    }
  }

  return FALSE;
}
